{
  "name": "Zengzihai.GitHub.io",
  "tagline": "乌鸦的救赎",
  "body": "# zengzihai.github.io\r\n乌鸦的救赎\r\njQuery 基本原理\r\n \t \t Next\r\njQuery 基本原理\r\n\r\nRebecca Murphey\r\n\r\nhttp://github.com/rmurphey/jqfundamentals\r\n\r\nWith contributions by James Padolsey, Paul Irish, and others. See the GitHub repository for a complete history of contributions.中文版由灰狐翻译团队完成：Hxgdzyuyi、Jack Hsing、Julian Wong、Leegorous、黎展波、Sky hx、Zengzhan、Allen 和其它朋友。\r\n\r\nCopyright © 2010\r\n\r\nLicensed by Rebecca Murphey under the Creative Commons Attribution-Share Alike 3.0 United States license. You are free to copy, distribute, transmit, and remix this work, provided you attribute the work to Rebecca Murphey as the original author and reference the GitHub repository for the work. If you alter, transform, or build upon this work, you may distribute the resulting work only under the same, similar or a compatible license. Any of the above conditions can be waived if you get permission from the copyright holder. For any reuse or distribution, you must make clear to others the license terms of this work. The best way to do this is with a link to the license.\r\n\r\nTable of Contents\r\n1. 欢迎\r\n获得代码* \r\n软件* \r\n在你的页面里添加JavaScript* \r\nJavaScript的调试* \r\n练习\r\n本书所使用的一些约定\r\n相关阅读材料\r\nI. JavaScript 101\r\n2. JavaScript 基础\r\n概述\r\n基础语法\r\n运算符\r\n条件语句\r\n循环语句\r\n关键字\r\n数组\r\n对象\r\n函数\r\n测试类型\r\n作用域\r\n闭包\r\nII. jQuery: 基础概念\r\n3. jQuery 基础\r\n$(document).ready()\r\n选择元素\r\n使用选择器\r\nCSS, Styling, & Dimensions\r\n属性\r\n遍历\r\n操作元素\r\n练习\r\n4. jQuery核心\r\n$ vs $()\r\n实用方法\r\n校验类型\r\n数据方法\r\n特色 & 浏览器探测\r\n避免与其它库的冲突\r\n5. 事件\r\n概述\r\n为元素绑定事件Connecting Events to Elements\r\n在事件处理函数中的函数 Inside the Event Handling Function\r\n触发事件处理函数\r\n使用事件委托提高性能\r\n事件助手\r\n练习\r\n6. Effects 特效\r\n概述\r\n基本特效\r\n使用$.fn.animate自定义效果\r\n管理效果\r\n练习\r\n7. Ajax\r\nOverview\r\nKey Concepts\r\njQuery's Ajax-Related Methods\r\nAjax and Forms\r\nWorking with JSONP\r\nAjax Events\r\nExercises\r\n8. 插件\r\n准确来说，什么是一个插件？\r\n如何创建一个基本的插件\r\n寻觅插件\r\n自己动手写插件\r\n使用 jQuery UI Widget Factory 编写有状态的插件（Stateful Plugins）\r\n练习\r\nIII. 高级主题\r\n工作进度\r\n9. 性能调优的最佳实践\r\n在循环中缓存 length\r\n在循环外使用 append\r\n保持 DRY\r\n当心匿名函数\r\n优化选择器\r\n使用事件委派\r\n先将元素 detach 出来再操作\r\n应该使用样式表给大量元素修改 CSS\r\n使用 $.data 而不是 $.fn.data\r\n别费时间在空白的选择结果上了\r\n变量定义\r\n条件判断\r\n别把 jQuery 当作黑盒子\r\n10. 代码组织\r\n概述\r\n封装\r\n管理依赖\r\n练习\r\n11. Custom Events\r\nIntroducing Custom Events\r\nList of Examples\r\n1.1. 页面内嵌JavaScript的例子\r\n1.2. 引用外部JavaScript的例子\r\n1.3. 例子的样式\r\n2.1. 一个简单的变量声明\r\n2.2. 引号外的空格和制表符是没有意义的\r\n2.3. 括号内的表达式拥有更高的优先级\r\n2.4. 制表符只是为了增加代码可读性，并没有什么其他的作用\r\n2.5. 连接字符串\r\n2.6. 乘法和除法\r\n2.7. 自加和自减\r\n2.8. 如果把数字和字符串相加，最后得到字符串\r\n2.9. 把字符串强制转换成数字类型\r\n2.10. 使用一元运算符的+号，把运算符后的变量转换成数字类型。\r\n2.11. 逻辑与和逻辑或操作符\r\n2.12. 比较运算符\r\n2.13. 流程控制\r\n2.14. 被判断义为 true的值\r\n2.15. 被判定为false的值\r\n2.16. 三元运算符\r\n2.17. 一个switch分支语句\r\n2.18. 循环语句\r\n2.19. 典型的for 循环\r\n2.20. 典型的 while循环\r\n2.21. while 循环，在条件判断部分对计数器i进行自加\r\n2.22. 一个 do-while 循环\r\n2.23. 停止循环\r\n2.24. 跳过下一个循环迭代\r\n2.25. 简单数组\r\n2.26. 通过索引访问数组项\r\n2.27. 测试数组长度\r\n2.28. 改变数组项值\r\n2.29. 加入元素到数组中\r\n2.30. 关于数组\r\n2.31. 创建一个对象常量\r\n2.32. 函数申明\r\n2.33. 命名函数表达式\r\n2.34. 一个简单函数\r\n2.35. 函数返回一个值\r\n2.36. 函数返回另一个函数\r\n2.37. 一个自执行的匿名函数\r\n2.38. 以参数的方式传递一个匿名函数\r\n2.39. 以参数的方式传递一个命名函数\r\n2.40. 测试各种变量的类型\r\n2.41. 函数访问同一作用域内定义的变量\r\n2.42. 代码作用域外定义的变量不能访问该变量Code outside the scope in which a variable was defined does not have access to the variable\r\n2.43. 拥有相同名字的变量可以以不同的值存在不同的作用域中\r\n2.44. 函数定义后可看见变量值的改变\r\n2.45. Scope insanity\r\n2.46. 如何锁定i的值？\r\n2.47. 以一个闭包的方式锁定i的值\r\n3.1. A $(document).ready() block\r\n3.2. $(document).ready() 简写\r\n3.3. 用命名函数替代匿名函数传递\r\n3.4. 通过ID选择元素\r\n3.5. 通过类名选择元素\r\n3.6. 通过属性选择元素\r\n3.7. 通过组合CSS选择器选择元素\r\n3.8. 伪选择器\r\n3.9. 测试选择器是否包含多个元素\r\n3.10. 在变量中保存选择器\r\n3.11. 改善选择器\r\n3.12. 使用表单相关的伪选择器\r\n3.13. 链式\r\n3.14. 格式化链式代码\r\n3.15. 使用 $.fn.end恢复你原来的选择器\r\n3.16. $.fn.html 方法作为一个 setter 使用\r\n3.17. html 方法作为一个 getter 使用\r\n3.18. 取得 CSS 属性\r\n3.19. Setting CSS properties\r\n3.20. 使用类\r\n3.21. 基本尺寸方法\r\n3.22. 设置属性\r\n3.23. 取得属性\r\n3.24. 使用遍历方法围绕DOM移动\r\n3.25. 通过选择器迭代\r\n3.26. 改变一个元素的HTML\r\n3.27. 使用不同的方法移动元素\r\n3.28. 拷贝一个元素\r\n3.29. 创建新元素\r\n3.30. 创建一个包含属性对象的新元素\r\n3.31. 从页中获得一个新元素\r\n3.32. 同一时刻创建和添加元素到页面\r\n3.33. 操作单一属性\r\n3.34. 操作多个属性\r\n3.35. 使用函数去确定新的属性值\r\n4.1. 校验任意值的类型e\r\n4.2. 存储和检索一个元素的相关数据\r\n4.3. 使用 $.fn.data 存储元素之间的关系\r\n4.4. 将 jQuery 设为 no-conflict 模式\r\n4.5. 在自执行匿名函数中使用 $\r\n5.1. 使用便捷的方式绑定\r\n5.2. 使用$.fn.bind方法绑定事件\r\n5.3. 使用$.fn.bind方法将数据绑定到事件\r\n5.4. 使用$.fn.one方法转换处理函数\r\n5.5. 取消选择器下所有的点击事件处理函数绑定\r\n5.6. 取消特定点击事件处理函数绑定\r\n5.7. 命名空间事件 Namespacing events\r\n5.8. 阻止链接被访问\r\n5.9. 以正确的方式触发事件处理函数\r\n5.10. 使用$.fn.delegate委托事件\r\n5.11. 使用$.fn.live委托事件\r\n5.12. 解除委托事件的绑定\r\n5.13. hover助手函数\r\n5.14. toggle助手函数\r\n6.1. 基本的动画效果\r\n6.2. 设置动画效果持续时间\r\n6.3. 增加 jQuery.fx.speeds 自定义动画速度\r\n6.4. 动画执行完后运行代码\r\n6.5. 运行回调函数即使没设置任何参数\r\n6.6. 使用$.fn.animate自定义效果\r\n6.7. easing属性\r\n7.1. Using the core $.ajax method\r\n7.2. Using jQuery's Ajax convenience methods\r\n7.3. Using $.fn.load to populate an element\r\n7.4. Using $.fn.load to populate an element based on a selector\r\n7.5. Turning form data into a query string\r\n7.6. Creating an array of objects containing form data\r\n7.7. Using YQL and JSONP\r\n7.8. Setting up a loading indicator using Ajax Events\r\n8.1. 这个插件用于 hover（鼠标划过）时添加/删除一个 class\r\n8.2. Mike Alsup 的 jQuery 插件设计模式\r\n8.3. 用 jQuery UI widget factory 创建一个简单的有状态的插件\r\n8.4. 给 widget 传递参数\r\n8.5. 给 widget 设置默认值\r\n8.6. 创建 widget 的方法\r\n8.7. 调用插件实例的方法\r\n8.8. 当参数被修改时执行一些操作\r\n8.9. 提供回调功能让用户进行扩展\r\n8.10. 绑定 widget 事件\r\n8.11. 给 widget 添加 destroy 方法\r\n10.1. 对象原语\r\n10.2. 将对象原语用到jQuery特性中\r\n10.3. 组件模式\r\n10.4. 通过jQuery使用组件模式\r\n10.5. 使用RequireJS：一个简单示例\r\n10.6. 使用依赖的简单JavaScript文件\r\n10.7. 定义一个没有依赖性的RequireJS模块\r\n10.8. 定义一个有依赖性的RequireJS模块\r\n10.9. 定义一个返回函数的RequireJS模块\r\n10.10. RequireJS构建配置文件\r\nCopyright Rebecca Murphey, released under the Creative Commons Attribution-Share Alike 3.0 United States license.\r\n\r\n \t \t Next\r\n \t \t Chapter 1. 欢迎",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}